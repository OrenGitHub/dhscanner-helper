{
    "keywords": [
        { "name": "LPAREN", "regex": "\\("},
        { "name": "RPAREN", "regex": "\\)"},
        { "name": "LBRACK", "regex": "\\["},
        { "name": "RBRACK", "regex": "\\]"},
        { "name": "COLON", "regex": "\":\""},
        { "name": "SLASH", "regex": "\"\\\""},
        { "name": "HYPHEN", "regex": "\\-"},
        { "name": "OR", "regex": "\\|"},
        { "name": "Alias", "regex": "Alias"},
        { "name": "Arg", "regex": "Arg"},
        { "name": "ArrayItem", "regex": "ArrayItem"},
        { "name": "ClosureUse", "regex": "ClosureUse"},
        { "name": "Const", "regex": "Const"},
        { "name": "Expr_Array", "regex": "Expr_Array"},
        { "name": "Expr_ArrayDimFetch", "regex": "Expr_ArrayDimFetch"},
        { "name": "Expr_Assign", "regex": "Expr_Assign"},
        { "name": "Expr_AssignOp_Concat", "regex": "Expr_AssignOp_Concat"},
        { "name": "Expr_AssignOp_Div", "regex": "Expr_AssignOp_Div"},
        { "name": "Expr_AssignOp_Minus", "regex": "Expr_AssignOp_Minus"},
        { "name": "Expr_AssignOp_Plus", "regex": "Expr_AssignOp_Plus"},
        { "name": "Expr_BinaryOp_BitwiseOr", "regex": "Expr_BinaryOp_BitwiseOr"},
        { "name": "Expr_BinaryOp_BooleanAnd", "regex": "Expr_BinaryOp_BooleanAnd"},
        { "name": "Expr_BinaryOp_BooleanOr", "regex": "Expr_BinaryOp_BooleanOr"},
        { "name": "Expr_BinaryOp_Coalesce", "regex": "Expr_BinaryOp_Coalesce"},
        { "name": "Expr_BinaryOp_Concat", "regex": "Expr_BinaryOp_Concat"},
        { "name": "Expr_BinaryOp_Div", "regex": "Expr_BinaryOp_Div"},
        { "name": "Expr_BinaryOp_Equal", "regex": "Expr_BinaryOp_Equal"},
        { "name": "Expr_BinaryOp_Greater", "regex": "Expr_BinaryOp_Greater"},
        { "name": "Expr_BinaryOp_GreaterOrEqual", "regex": "Expr_BinaryOp_GreaterOrEqual"},
        { "name": "Expr_BinaryOp_Identical", "regex": "Expr_BinaryOp_Identical"},
        { "name": "Expr_BinaryOp_LogicalOr", "regex": "Expr_BinaryOp_LogicalOr"},
        { "name": "Expr_BinaryOp_Minus", "regex": "Expr_BinaryOp_Minus"},
        { "name": "Expr_BinaryOp_Mul", "regex": "Expr_BinaryOp_Mul"},
        { "name": "Expr_BinaryOp_NotEqual", "regex": "Expr_BinaryOp_NotEqual"},
        { "name": "Expr_BinaryOp_NotIdentical", "regex": "Expr_BinaryOp_NotIdentical"},
        { "name": "Expr_BinaryOp_Plus", "regex": "Expr_BinaryOp_Plus"},
        { "name": "Expr_BinaryOp_Smaller", "regex": "Expr_BinaryOp_Smaller"},
        { "name": "Expr_BinaryOp_SmallerOrEqual", "regex": "Expr_BinaryOp_SmallerOrEqual"},
        { "name": "Expr_BooleanNot", "regex": "Expr_BooleanNot"},
        { "name": "Expr_Cast_Bool", "regex": "Expr_Cast_Bool"},
        { "name": "Expr_Cast_Double", "regex": "Expr_Cast_Double"},
        { "name": "Expr_Cast_Int", "regex": "Expr_Cast_Int"},
        { "name": "Expr_Cast_Object", "regex": "Expr_Cast_Object"},
        { "name": "Expr_Cast_String", "regex": "Expr_Cast_String"},
        { "name": "Expr_ClassConstFetch", "regex": "Expr_ClassConstFetch"},
        { "name": "Expr_Closure", "regex": "Expr_Closure"},
        { "name": "Expr_ConstFetch", "regex": "Expr_ConstFetch"},
        { "name": "Expr_Empty", "regex": "Expr_Empty"},
        { "name": "Expr_ErrorSuppress", "regex": "Expr_ErrorSuppress"},
        { "name": "Expr_Exit", "regex": "Expr_Exit"},
        { "name": "Expr_FuncCall", "regex": "Expr_FuncCall"},
        { "name": "Expr_Include", "regex": "Expr_Include"},
        { "name": "Expr_Instanceof", "regex": "Expr_Instanceof"},
        { "name": "Expr_Isset", "regex": "Expr_Isset"},
        { "name": "Expr_List", "regex": "Expr_List"},
        { "name": "Expr_MethodCall", "regex": "Expr_MethodCall"},
        { "name": "Expr_New", "regex": "Expr_New"},
        { "name": "Expr_PostDec", "regex": "Expr_PostDec"},
        { "name": "Expr_PostInc", "regex": "Expr_PostInc"},
        { "name": "Expr_Print", "regex": "Expr_Print"},
        { "name": "Expr_PropertyFetch", "regex": "Expr_PropertyFetch"},
        { "name": "Expr_StaticCall", "regex": "Expr_StaticCall"},
        { "name": "Expr_StaticPropertyFetch", "regex": "Expr_StaticPropertyFetch"},
        { "name": "Expr_Ternary", "regex": "Expr_Ternary"},
        { "name": "Expr_Throw", "regex": "Expr_Throw"},
        { "name": "Expr_UnaryMinus", "regex": "Expr_UnaryMinus"},
        { "name": "Expr_Variable", "regex": "Expr_Variable"},
        { "name": "Identifier", "regex": "Identifier"},
        { "name": "Name", "regex": "Name"},
        { "name": "Name_FullyQualified", "regex": "Name_FullyQualified"},
        { "name": "Param", "regex": "Param"},
        { "name": "Scalar_Float", "regex": "Scalar_Float"},
        { "name": "Scalar_Int", "regex": "Scalar_Int"},
        { "name": "Scalar_InterpolatedString", "regex": "Scalar_InterpolatedString"},
        { "name": "Scalar_MagicConst_Class", "regex": "Scalar_MagicConst_Class"},
        { "name": "Scalar_MagicConst_Dir", "regex": "Scalar_MagicConst_Dir"},
        { "name": "Scalar_MagicConst_File", "regex": "Scalar_MagicConst_File"},
        { "name": "StaticVar", "regex": "StaticVar"},
        { "name": "Stmt_Break", "regex": "Stmt_Break"},
        { "name": "Stmt_Case", "regex": "Stmt_Case"},
        { "name": "Stmt_Catch", "regex": "Stmt_Catch"},
        { "name": "Stmt_Class", "regex": "Stmt_Class"},
        { "name": "Stmt_ClassConst", "regex": "Stmt_ClassConst"},
        { "name": "Stmt_ClassMethod", "regex": "Stmt_ClassMethod"},
        { "name": "Stmt_Continue", "regex": "Stmt_Continue"},
        { "name": "Stmt_Do", "regex": "Stmt_Do"},
        { "name": "Stmt_Echo", "regex": "Stmt_Echo"},
        { "name": "Stmt_Else", "regex": "Stmt_Else"},
        { "name": "Stmt_ElseIf", "regex": "Stmt_ElseIf"},
        { "name": "Stmt_Expression", "regex": "Stmt_Expression"},
        { "name": "Stmt_For", "regex": "Stmt_For"},
        { "name": "Stmt_Foreach", "regex": "Stmt_Foreach"},
        { "name": "Stmt_Function", "regex": "Stmt_Function"},
        { "name": "Stmt_Global", "regex": "Stmt_Global"},
        { "name": "Stmt_If", "regex": "Stmt_If"},
        { "name": "Stmt_Interface", "regex": "Stmt_Interface"},
        { "name": "Stmt_Namespace", "regex": "Stmt_Namespace"},
        { "name": "Stmt_Nop", "regex": "Stmt_Nop"},
        { "name": "Stmt_Property", "regex": "Stmt_Property"},
        { "name": "Stmt_Return", "regex": "Stmt_Return"},
        { "name": "Stmt_Static", "regex": "Stmt_Static"},
        { "name": "Stmt_Switch", "regex": "Stmt_Switch"},
        { "name": "Stmt_Trait", "regex": "Stmt_Trait"},
        { "name": "Stmt_TraitUse", "regex": "Stmt_TraitUse"},
        { "name": "Stmt_TryCatch", "regex": "Stmt_TryCatch"},
        { "name": "Stmt_Unset", "regex": "Stmt_Unset"},
        { "name": "Stmt_Use", "regex": "Stmt_Use"},
        { "name": "Stmt_While", "regex": "Stmt_While"},
        { "name": "UseItem", "regex": "UseItem"},
        { "name": "alias", "regex": "alias"},
        { "name": "args", "regex": "args"},
        { "name": "array", "regex": "array"},
        { "name": "cond", "regex": "cond"},
        { "name": "expr", "regex": "expr"},
        { "name": "exprs", "regex": "exprs"},
        { "name": "init", "regex": "init"},
        { "name": "left", "regex": "left"},
        { "name": "loop", "regex": "loop"},
        { "name": "name", "regex": "name"},
        { "name": "null", "regex": "null"},
        { "name": "returnType", "regex": "returnType"},
        { "name": "right", "regex": "right"},
        { "name": "stmts", "regex": "stmts"},
        { "name": "type", "regex": "type"},
        { "name": "uses", "regex": "uses"},
        { "name": "regex", "regex": "regex"},
        { "name": "var", "regex": "var"},
        { "name": "INT", "regex": "[0-9]+" },
        { "name": "DOT", "regex": "\\\\." },
        { "name": "FLOAT", "regex": "[0-9]+\\\\.[0-9]+" },
        { "name": "ID", "regex": "[A-Za-z_\\\\]([A-Za-z_\\\\] | [0-9])*" },
        { "name": "STR", "regex": "\"Scalar_String\"\\[(?=[0-9]+\":\"[0-9]+($white)\\-($white)[0-9]+\":\"[0-9]+)\\]\\(([\\s]+)\"value: \"[ $printable $white ]*\\n([\\s]+)\\)|\"InterpolatedStringPart\"\\[(?=[0-9]+\":\"[0-9]+($white)\\-($white)[0-9]+\":\"[0-9]+)\\]\\(([\\s]+)\"value: \"[ $printable $white ]*\\n([\\s]+)\\)" }
    ]
}